import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Assignment } from './entities/assignment.entity';
import { CreateAssignmentDto } from './dto/create-assignment.dto';
import { UpdateAssignmentDto } from './dto/update-assignment.dto';
import { Patient } from '../patient/entities/patient.entity';
import { Medication } from '../medication/entities/medication.entity';

@Injectable()
export class AssignmentService {
  constructor(
    @InjectRepository(Assignment)
    private readonly assignmentRepository: Repository<Assignment>,
    @InjectRepository(Patient)
    private readonly patientRepository: Repository<Patient>,
    @InjectRepository(Medication)
    private readonly medicationRepository: Repository<Medication>,
  ) {}

  async create(createAssignmentDto: CreateAssignmentDto): Promise<Assignment> {
    const { patientId, medicationId, startDate, numberOfDays } =
      createAssignmentDto;

    const patient = await this.patientRepository.findOneBy({ id: patientId });
    if (!patient) {
      throw new NotFoundException(`Patient with ID "${patientId}" not found`);
    }

    const medication = await this.medicationRepository.findOneBy({
      id: medicationId,
    });
    if (!medication) {
      throw new NotFoundException(
        `Medication with ID "${medicationId}" not found`,
      );
    }

    const newAssignment = this.assignmentRepository.create({
      startDate,
      numberOfDays,
      patient,
      medication,
    });

    return this.assignmentRepository.save(newAssignment);
  }

  private calculateRemainingDays(assignment: Assignment): number {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Set to start of today

    const startDate = new Date(assignment.startDate);
    startDate.setHours(0, 0, 0, 0); // Set to start of start date

    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + assignment.numberOfDays);
    endDate.setHours(0, 0, 0, 0); // Set to start of end date

    const diffTime = endDate.getTime() - today.getTime();
    const diffDays = diffTime / (1000 * 60 * 60 * 24);
    return Math.ceil(diffDays); // Use ceil to count partial days as full days remaining
  }

  async findAllWithRemainingDays(): Promise<
    (Assignment & { remainingDays: number })[]
  > {
    const assignments = await this.assignmentRepository.find({
      relations: ['patient', 'medication'],
    });
    return assignments.map((assignment) => ({
      ...assignment,
      remainingDays: this.calculateRemainingDays(assignment),
    }));
  }

  findAll(): Promise<Assignment[]> {
    return this.assignmentRepository.find({
      relations: ['patient', 'medication'],
    });
  }

  async findOne(id: number): Promise<Assignment> {
    const assignment = await this.assignmentRepository.findOne({
      where: { id },
      relations: ['patient', 'medication'],
    });
    if (!assignment) {
      throw new NotFoundException(`Assignment with ID "${id}" not found`);
    }
    return assignment;
  }

  async update(
    id: number,
    updateAssignmentDto: UpdateAssignmentDto,
  ): Promise<Assignment> {
    const assignment = await this.findOne(id);
    // The rest of the update logic generated by the AI is fine.
    // This is just a placeholder for brevity.
    const { patientId, medicationId, ...rest } = updateAssignmentDto;

    if (patientId) {
      const patient = await this.patientRepository.findOneBy({ id: patientId });
      if (!patient)
        throw new NotFoundException(`Patient with ID "${patientId}" not found`);
      assignment.patient = patient;
    }

    if (medicationId) {
      const medication = await this.medicationRepository.findOneBy({
        id: medicationId,
      });
      if (!medication)
        throw new NotFoundException(
          `Medication with ID "${medicationId}" not found`,
        );
      assignment.medication = medication;
    }

    Object.assign(assignment, rest);
    return this.assignmentRepository.save(assignment);
  }

  async remove(id: number): Promise<void> {
    const result = await this.assignmentRepository.delete(id);
    if (result.affected === 0) {
      throw new NotFoundException(`Assignment with ID "${id}" not found`);
    }
  }
}
